{"ast":null,"code":"var _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"fav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, film.title, \" - unFav\");\n    } else {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"nonfav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, film.title, \" - Fav\");\n    }\n  });\n  return list;\n};\n\nconst IndexPage = props => {\n  const {\n    0: films,\n    1: setFilms\n  } = useState(props[0]);\n  const {\n    0: favs,\n    1: setFavs\n  } = useState([]);\n  const {\n    0: html,\n    1: setHtml\n  } = useState(createList(films));\n  console.log(films);\n  console.log(html); //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n\n    if (storedFavs) {\n      const list = films.map(film => {\n        if (favs.indexOf(film.episode_id) > 0) {\n          __jsx(\"li\", {\n            key: film.episode_id,\n            className: \"fav\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, film.title, \" - unFav\");\n        } else {\n          __jsx(\"li\", {\n            key: film.episode_id,\n            className: \"nonfav\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, film.title, \" - Fav\");\n        }\n      });\n      console.log(list);\n    }\n\n    setFavs([\"test\"]);\n    console.log(\"useEffect run\");\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: filmList => setFilms(filmList),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, html), __jsx(\"button\", {\n    onClick: () => setHtml(__jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"test\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Fav\"));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","createList","films","favs","list","map","film","indexOf","episode_id","title","IndexPage","props","setFilms","setFavs","html","setHtml","console","log","storedFavs","JSON","parse","localStorage","getItem","filmList","getInitialProps","url","res","data","json","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return (\n        <li key={film.episode_id} className=\"fav\">\n          {film.title} - unFav\n        </li>\n      );\n    } else {\n      return (\n        <li key={film.episode_id} className=\"nonfav\">\n          {film.title} - Fav\n        </li>\n      );\n    }\n  });\n  return list;\n};\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  const [html, setHtml] = useState(createList(films));\n  console.log(films);\n  console.log(html);\n\n  //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n\n    setFavs(storedFavs || []);\n\n    if (storedFavs) {\n      const list = films.map(film => {\n        if (favs.indexOf(film.episode_id) > 0) {\n          <li key={film.episode_id} className=\"fav\">\n            {film.title} - unFav\n          </li>;\n        } else {\n          <li key={film.episode_id} className=\"nonfav\">\n            {film.title} - Fav\n          </li>;\n        }\n      });\n      console.log(list);\n    }\n    setFavs([\"test\"]);\n\n    console.log(\"useEffect run\");\n  }, []);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n      <button onClick={() => setHtml(<li>test</li>)}>Fav</button>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}