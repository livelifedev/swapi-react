{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nvar createList = function createList(films) {\n  films.map(function (film) {\n    return __jsx(\"li\", {\n      key: film.episode_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, film.title, \" - Fav\");\n  });\n};\n\nvar IndexPage = function IndexPage(props) {\n  var _useState = useState(props[0]),\n      films = _useState[0],\n      setFilms = _useState[1];\n\n  var _useState2 = useState([]),\n      favs = _useState2[0],\n      setFavs = _useState2[1];\n\n  var _useState3 = useState(createList(films)),\n      html = _useState3[0],\n      setHtml = _useState3[1];\n\n  console.log(films);\n  console.log(html); //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(function () {\n    var storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []); // if (StoredFavs) {\n    //   const list = films.map(film => {\n    //     if (favs.indexOf(film.episode_id) > 0) {\n    //       <li key={film.episode_id} className=\"fav\">\n    //         {film.title} - unFav\n    //       </li>;\n    //     } else {\n    //       <li key={film.episode_id} className=\"nonfav\">\n    //         {film.title} - Fav\n    //       </li>;\n    //     }\n    //   });\n    //   console.log(list);\n    // }\n    // setFavs([\"test\"]);\n\n    console.log(\"useEffect run\");\n  }, [favs]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: function handleSearch(filmList) {\n      return setFilms(filmList);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, html), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setHtml(__jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"test\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Fav\"));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var url, res, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = \"https://swapi.co/api/films/\";\n          _context.next = 3;\n          return fetch(url);\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context.sent;\n          console.log(\"run\");\n          return _context.abrupt(\"return\", [data.results]);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","createList","films","map","film","episode_id","title","IndexPage","props","setFilms","favs","setFavs","html","setHtml","console","log","storedFavs","JSON","parse","localStorage","getItem","filmList","getInitialProps","url","res","json","data","results"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAC1BA,EAAAA,KAAK,CAACC,GAAN,CAAU,UAAAC,IAAI;AAAA,WAAI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2BD,IAAI,CAACE,KAAhC,WAAJ;AAAA,GAAd;AACD,CAFD;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,kBACCX,QAAQ,CAACW,KAAK,CAAC,CAAD,CAAN,CADT;AAAA,MAClBN,KADkB;AAAA,MACXO,QADW;;AAAA,mBAEDZ,QAAQ,CAAC,EAAD,CAFP;AAAA,MAElBa,IAFkB;AAAA,MAEZC,OAFY;;AAAA,mBAGDd,QAAQ,CAACI,UAAU,CAACC,KAAD,CAAX,CAHP;AAAA,MAGlBU,IAHkB;AAAA,MAGZC,OAHY;;AAIzBC,EAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EALyB,CAOzB;AACA;AACA;AACA;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMkB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAnB;AACAT,IAAAA,OAAO,CAACK,UAAU,IAAI,EAAf,CAAP,CAFc,CAId;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GApBQ,EAoBN,CAACL,IAAD,CApBM,CAAT;AAsBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,YAAY,EAAE,sBAAAW,QAAQ;AAAA,aAAIZ,QAAQ,CAACY,QAAD,CAAZ;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,IAAL,CAHF,EAIE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMC,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAD,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,CADF;AAQD,CA1CD,C,CA4CA;;;AAEAN,SAAS,CAACe,eAAV;AAAA;AAAA;AAAA;AAAA,yBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,UAAAA,GADoB,GACd,6BADc;AAAA;AAAA,iBAERxB,KAAK,CAACwB,GAAD,CAFG;;AAAA;AAEpBC,UAAAA,GAFoB;AAAA;AAAA,iBAGPA,GAAG,CAACC,IAAJ,EAHO;;AAAA;AAGpBC,UAAAA,IAHoB;AAK1BZ,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAL0B,2CAMnB,CAACW,IAAI,CAACC,OAAN,CANmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;AASA,eAAepB,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = films => {\n  films.map(film => <li key={film.episode_id}>{film.title} - Fav</li>);\n};\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  const [html, setHtml] = useState(createList(films));\n  console.log(films);\n  console.log(html);\n\n  //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n\n    // if (StoredFavs) {\n    //   const list = films.map(film => {\n    //     if (favs.indexOf(film.episode_id) > 0) {\n    //       <li key={film.episode_id} className=\"fav\">\n    //         {film.title} - unFav\n    //       </li>;\n    //     } else {\n    //       <li key={film.episode_id} className=\"nonfav\">\n    //         {film.title} - Fav\n    //       </li>;\n    //     }\n    //   });\n    //   console.log(list);\n    // }\n    // setFavs([\"test\"]);\n    console.log(\"useEffect run\");\n  }, [favs]);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n      <button onClick={() => setHtml(<li>test</li>)}>Fav</button>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}