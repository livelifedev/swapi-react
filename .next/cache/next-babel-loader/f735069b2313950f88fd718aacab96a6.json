{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  console.log(favs);\n\n  const favClick = () => {\n    localStorage.setItem(\"favs\", _JSON$stringify(favs));\n    alert(\"favourited\");\n  };\n\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"fav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, film.title, \" - unFav\");\n    } else {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"nonfav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, film.title, \" -\", \" \", __jsx(\"button\", {\n        onClick: () => {\n          favClick(favs);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Fav\"));\n    }\n  });\n  return list;\n};\n\nconst IndexPage = props => {\n  const {\n    0: films,\n    1: setFilms\n  } = useState(props[0]);\n  const {\n    0: favs,\n    1: setFavs\n  } = useState([]);\n  const {\n    0: html,\n    1: setHtml\n  } = useState(createList(films));\n  const {\n    0: toggle,\n    1: setToggle\n  } = useState(false);\n  console.log(films);\n  console.log(html);\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, favs));\n    console.log(\"useEffect run\");\n  }, [toggle]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: filmList => setFilms(filmList),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, html));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","createList","films","favs","console","log","favClick","localStorage","setItem","alert","list","map","film","indexOf","episode_id","title","IndexPage","props","setFilms","setFavs","html","setHtml","toggle","setToggle","storedFavs","JSON","parse","getItem","filmList","getInitialProps","url","res","data","json","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  console.log(favs);\n  const favClick = () => {\n    localStorage.setItem(\"favs\", JSON.stringify(favs));\n    alert(\"favourited\");\n  };\n\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return (\n        <li key={film.episode_id} className=\"fav\">\n          {film.title} - unFav\n        </li>\n      );\n    } else {\n      return (\n        <li key={film.episode_id} className=\"nonfav\">\n          {film.title} -{\" \"}\n          <button\n            onClick={() => {\n              favClick(favs);\n            }}\n          >\n            Fav\n          </button>\n        </li>\n      );\n    }\n  });\n  return list;\n};\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  const [html, setHtml] = useState(createList(films));\n  const [toggle, setToggle] = useState(false);\n  console.log(films);\n  console.log(html);\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, favs));\n\n    console.log(\"useEffect run\");\n  }, [toggle]);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}