{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nvar createList = function createList(films) {\n  var favs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var list = films.map(function (film) {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"fav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, film.title, \" - unFav\");\n    } else {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"nonfav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, film.title, \" - Fav\");\n    }\n  });\n  return list;\n};\n\nvar favToggle = function favToggle(favs) {\n  localStorage.setItem(\"favs\", _JSON$stringify(favs));\n  alert(\"favourited\");\n};\n\nvar IndexPage = function IndexPage(props) {\n  var _useState = useState(props[0]),\n      films = _useState[0],\n      setFilms = _useState[1];\n\n  var _useState2 = useState([]),\n      favs = _useState2[0],\n      setFavs = _useState2[1];\n\n  var _useState3 = useState(createList(films)),\n      html = _useState3[0],\n      setHtml = _useState3[1];\n\n  var _useState4 = useState(false),\n      toggle = _useState4[0],\n      setToggle = _useState4[1];\n\n  console.log(films);\n  console.log(html);\n  useEffect(function () {\n    var storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, storedFavs));\n    console.log(\"useEffect run\");\n  }, [toggle]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: function handleSearch(filmList) {\n      return setFilms(filmList);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, html), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setHtml(__jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"test\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Fav\"));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var url, res, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = \"https://swapi.co/api/films/\";\n          _context.next = 3;\n          return fetch(url);\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context.sent;\n          console.log(\"run\");\n          return _context.abrupt(\"return\", [data.results]);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","createList","films","favs","list","map","film","indexOf","episode_id","title","favToggle","localStorage","setItem","alert","IndexPage","props","setFilms","setFavs","html","setHtml","toggle","setToggle","console","log","storedFavs","JSON","parse","getItem","filmList","getInitialProps","url","res","json","data","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return (\n        <li key={film.episode_id} className=\"fav\">\n          {film.title} - unFav\n        </li>\n      );\n    } else {\n      return (\n        <li key={film.episode_id} className=\"nonfav\">\n          {film.title} - Fav\n        </li>\n      );\n    }\n  });\n  return list;\n};\n\nconst favToggle = favs => {\n  localStorage.setItem(\"favs\", JSON.stringify(favs));\n  alert(\"favourited\");\n};\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  const [html, setHtml] = useState(createList(films));\n  const [toggle, setToggle] = useState(false);\n  console.log(films);\n  console.log(html);\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, storedFavs));\n\n    console.log(\"useEffect run\");\n  }, [toggle]);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n      <button onClick={() => setHtml(<li>test</li>)}>Fav</button>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}