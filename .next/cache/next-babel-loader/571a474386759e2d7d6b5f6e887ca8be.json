{"ast":null,"code":"var _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst IndexPage = props => {\n  const {\n    0: films,\n    1: setFilms\n  } = useState(props[0]);\n  const {\n    0: favs,\n    1: setFavs\n  } = useState([]); // turn this into reusable functon\n\n  let htmlList = films.map(film => __jsx(\"li\", {\n    key: film.episode_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, film.title, \" - Fav\"));\n  const {\n    0: html,\n    1: setHtml\n  } = useState(htmlList);\n  console.log(films);\n  console.log(html); //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(() => {\n    // when you add new fav, you want this to run again\n    // setfavs outside of useEffect\n    // change the htmlList inside here\n    // page will rerender after useEffect\n    const StoredFavs = JSON.parse(localStorage.getItem(\"favs\"));\n\n    if (StoredFavs) {\n      const list = films.map(film => {\n        if (favs.indexOf(film.episode_id) > 0) {\n          __jsx(\"li\", {\n            key: film.episode_id,\n            className: \"fav\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          }, film.title, \" - unFav\");\n        } else {\n          __jsx(\"li\", {\n            key: film.episode_id,\n            className: \"nonfav\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          }, film.title, \" - Fav\");\n        }\n      });\n      console.log(list);\n    } // setFavs([\"test\"]);\n\n\n    console.log(\"useEffect run\");\n  }, [favs]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: filmList => setFilms(filmList),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, html), __jsx(\"button\", {\n    onClick: () => setHtml(__jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"test\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Fav\"));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","IndexPage","props","films","setFilms","favs","setFavs","htmlList","map","film","episode_id","title","html","setHtml","console","log","StoredFavs","JSON","parse","localStorage","getItem","list","indexOf","filmList","getInitialProps","url","res","data","json","results"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAN,CAAlC;AACA,QAAM;AAAA,OAACG,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,EAAD,CAAhC,CAFyB,CAGzB;;AACA,MAAIU,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAUC,IAAI,IAC3B;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BD,IAAI,CAACE,KAAhC,WADa,CAAf;AAGA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBhB,QAAQ,CAACU,QAAD,CAAhC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EATyB,CAWzB;AACA;AACA;AACA;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA,UAAMkB,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAnB;;AACA,QAAIJ,UAAJ,EAAgB;AACd,YAAMK,IAAI,GAAGlB,KAAK,CAACK,GAAN,CAAUC,IAAI,IAAI;AAC7B,YAAIJ,IAAI,CAACiB,OAAL,CAAab,IAAI,CAACC,UAAlB,IAAgC,CAApC,EAAuC;AACrC;AAAI,YAAA,GAAG,EAAED,IAAI,CAACC,UAAd;AAA0B,YAAA,SAAS,EAAC,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGD,IAAI,CAACE,KADR;AAGD,SAJD,MAIO;AACL;AAAI,YAAA,GAAG,EAAEF,IAAI,CAACC,UAAd;AAA0B,YAAA,SAAS,EAAC,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGD,IAAI,CAACE,KADR;AAGD;AACF,OAVY,CAAb;AAWAG,MAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACD,KAnBa,CAoBd;;;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAtBQ,EAsBN,CAACV,IAAD,CAtBM,CAAT;AAwBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,YAAY,EAAEkB,QAAQ,IAAInB,QAAQ,CAACmB,QAAD,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKX,IAAL,CAHF,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAMC,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAJF,CADF;AAQD,CAhDD,C,CAkDA;;;AAEAZ,SAAS,CAACuB,eAAV,GAA4B,YAAY;AACtC,QAAMC,GAAG,GAAG,6BAAZ;AACA,QAAMC,GAAG,GAAG,MAAM3B,KAAK,CAAC0B,GAAD,CAAvB;AACA,QAAME,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AAEAd,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAO,CAACY,IAAI,CAACE,OAAN,CAAP;AACD,CAPD;;AASA,eAAe5B,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  // turn this into reusable functon\n  let htmlList = films.map(film => (\n    <li key={film.episode_id}>{film.title} - Fav</li>\n  ));\n  const [html, setHtml] = useState(htmlList);\n  console.log(films);\n  console.log(html);\n\n  //htmlList will not change, unless its a state\n  // let htmlList = films.map(film => (\n  //   <li key={film.episode_id}>{film.title} - Fav</li>\n  // ));\n\n  useEffect(() => {\n    // when you add new fav, you want this to run again\n    // setfavs outside of useEffect\n    // change the htmlList inside here\n    // page will rerender after useEffect\n    const StoredFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    if (StoredFavs) {\n      const list = films.map(film => {\n        if (favs.indexOf(film.episode_id) > 0) {\n          <li key={film.episode_id} className=\"fav\">\n            {film.title} - unFav\n          </li>;\n        } else {\n          <li key={film.episode_id} className=\"nonfav\">\n            {film.title} - Fav\n          </li>;\n        }\n      });\n      console.log(list);\n    }\n    // setFavs([\"test\"]);\n    console.log(\"useEffect run\");\n  }, [favs]);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n      <button onClick={() => setHtml(<li>test</li>)}>Fav</button>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}