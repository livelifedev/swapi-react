{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/johnrubio/github_projects/swapi-react/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"fav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, film.title, \" - unFav\");\n    } else {\n      return __jsx(\"li\", {\n        key: film.episode_id,\n        className: \"nonfav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, film.title, \" - Fav\");\n    }\n  });\n  return list;\n};\n\nconst favToggle = favs => {\n  localStorage.setItem(\"favs\", _JSON$stringify(favs));\n  alert(\"favourited\");\n};\n\nconst IndexPage = props => {\n  const {\n    0: films,\n    1: setFilms\n  } = useState(props[0]);\n  const {\n    0: favs,\n    1: setFavs\n  } = useState([]);\n  const {\n    0: html,\n    1: setHtml\n  } = useState(createList(films));\n  const {\n    0: toggle,\n    1: setToggle\n  } = useState(false);\n  console.log(films);\n  console.log(html);\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, storedFavs));\n    console.log(\"useEffect run\");\n  }, [toggle]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(Search, {\n    handleSearch: filmList => setFilms(filmList),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Star Wars Films\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, html), __jsx(\"button\", {\n    onClick: () => setHtml(__jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"test\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Fav\"));\n}; // onclick of fave, will push to local storage, will update fav state\n\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/johnrubio/github_projects/swapi-react/pages/index.js"],"names":["React","useState","useEffect","fetch","Search","createList","films","favs","list","map","film","indexOf","episode_id","title","favToggle","localStorage","setItem","alert","IndexPage","props","setFilms","setFavs","html","setHtml","toggle","setToggle","console","log","storedFavs","JSON","parse","getItem","filmList","getInitialProps","url","res","data","json","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"isomorphic-unfetch\";\nimport Search from \"../components/search\";\n\nconst createList = (films, favs = []) => {\n  const list = films.map(film => {\n    if (favs.indexOf(film.episode_id) > 0) {\n      return (\n        <li key={film.episode_id} className=\"fav\">\n          {film.title} - unFav\n        </li>\n      );\n    } else {\n      return (\n        <li key={film.episode_id} className=\"nonfav\">\n          {film.title} - Fav\n        </li>\n      );\n    }\n  });\n  return list;\n};\n\nconst favToggle = favs => {\n  localStorage.setItem(\"favs\", JSON.stringify(favs));\n  alert(\"favourited\");\n};\n\nconst IndexPage = props => {\n  const [films, setFilms] = useState(props[0]);\n  const [favs, setFavs] = useState([]);\n  const [html, setHtml] = useState(createList(films));\n  const [toggle, setToggle] = useState(false);\n  console.log(films);\n  console.log(html);\n\n  useEffect(() => {\n    const storedFavs = JSON.parse(localStorage.getItem(\"favs\"));\n    setFavs(storedFavs || []);\n    setHtml(createList(films, storedFavs));\n\n    console.log(\"useEffect run\");\n  }, [toggle]);\n\n  return (\n    <div>\n      <Search handleSearch={filmList => setFilms(filmList)} />\n      <h1>Star Wars Films</h1>\n      <ul>{html}</ul>\n      <button onClick={() => setHtml(<li>test</li>)}>Fav</button>\n    </div>\n  );\n};\n\n// onclick of fave, will push to local storage, will update fav state\n\nIndexPage.getInitialProps = async () => {\n  const url = \"https://swapi.co/api/films/\";\n  const res = await fetch(url);\n  const data = await res.json();\n\n  console.log(\"run\");\n  return [data.results];\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}